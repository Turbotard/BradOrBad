#!/usr/bin/env python3
"""
Script de debug pour tester la connexion OpenAI et diagnostiquer les probl√®mes
"""

from openai import OpenAI
import os

def test_openai_connection():
    """Test la connexion OpenAI avec diff√©rents diagnostics"""
    
    print("üîç Diagnostic de l'API OpenAI")
    print("=" * 40)
    
    # Test avec la cl√© fournie
    api_key = "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"
    
    print(f"üîë Cl√© API (masqu√©e): {api_key[:20]}...{api_key[-10:]}")
    print(f"üìè Longueur cl√©: {len(api_key)} caract√®res")
    
    try:
        client = OpenAI(api_key=api_key)
        
        # Test simple avec tr√®s peu de tokens
        print("\nüß™ Test 1: Requ√™te minimale...")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Mod√®le moins cher
            messages=[
                {"role": "user", "content": "Hi"}
            ],
            max_tokens=5,  # Tr√®s peu de tokens
            temperature=0
        )
        
        print("‚úÖ Test 1 r√©ussi !")
        print(f"R√©ponse: {response.choices[0].message.content}")
        
        # Test avec gpt-4
        print("\nüß™ Test 2: GPT-4...")
        response2 = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "user", "content": "Say 'OK'"}
            ],
            max_tokens=3,
            temperature=0
        )
        
        print("‚úÖ Test 2 r√©ussi !")
        print(f"R√©ponse GPT-4: {response2.choices[0].message.content}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur API: {str(e)}")
        
        # Analyse d√©taill√©e de l'erreur
        if "429" in str(e):
            print("\nüîç Erreur 429 d√©tect√©e:")
            print("‚Ä¢ Quota insuffisant OU")
            print("‚Ä¢ Limite de taux d√©pass√©e OU") 
            print("‚Ä¢ Probl√®me de facturation")
            
        elif "401" in str(e):
            print("\nüîç Erreur 401 d√©tect√©e:")
            print("‚Ä¢ Cl√© API invalide")
            print("‚Ä¢ Cl√© expir√©e")
            
        elif "403" in str(e):
            print("\nüîç Erreur 403 d√©tect√©e:")
            print("‚Ä¢ Acc√®s refus√©")
            print("‚Ä¢ Compte suspendu")
            
        print(f"\nüí° Solutions possibles:")
        print("1. V√©rifiez votre solde sur platform.openai.com")
        print("2. V√©rifiez les limites de d√©penses dans 'Usage limits'")
        print("3. Essayez de r√©g√©n√©rer votre cl√© API")
        print("4. V√©rifiez que le bon compte/organisation est s√©lectionn√©")
        
        return False

def test_models_availability():
    """Test quels mod√®les sont disponibles"""
    api_key = "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"
    
    try:
        client = OpenAI(api_key=api_key)
        print("\nüìã Mod√®les disponibles:")
        
        models_to_test = ["gpt-3.5-turbo", "gpt-4", "gpt-4-turbo", "gpt-4o-mini"]
        
        for model in models_to_test:
            try:
                response = client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": "Hi"}],
                    max_tokens=1
                )
                print(f"‚úÖ {model}: Disponible")
            except Exception as e:
                print(f"‚ùå {model}: {str(e)[:50]}...")
                
    except Exception as e:
        print(f"‚ùå Impossible de lister les mod√®les: {e}")

if __name__ == "__main__":
    # Test principal
    success = test_openai_connection()
    
    if not success:
        print("\nüîß Test des mod√®les individuels...")
        test_models_availability()
    
    print(f"\nüéØ R√©sum√©:")
    if success:
        print("‚úÖ API OpenAI fonctionnelle")
        print("üöÄ Probl√®me r√©solu ! Brad va utiliser l'IA")
    else:
        print("‚ö†Ô∏è API OpenAI indisponible") 
        print("üõ°Ô∏è Brad utilisera le mode de secours")
        print("üí° Contactez le support OpenAI si vous avez du cr√©dit")
    
    input("\nAppuyez sur Entr√©e pour continuer...") 