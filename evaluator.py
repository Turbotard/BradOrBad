"""
Module d'√©valuation des r√©ponses utilisateur pour d√©terminer leur niveau
de vigilance face aux arnaques sentimentales.
"""

import re
import random

class ResponseAnalyzer:
    """Analyseur de r√©ponses utilisateur"""
    
    def __init__(self):
        # Mots-cl√©s indicateurs de diff√©rents types de r√©ponses
        self.suspicious_keywords = [
            "suspect", "arnaque", "faux", "bizarre", "louche", "m√©fiant", "doute",
            "impossible", "scam", "fraudeur", "menteur", "vrai brad pitt",
            "c√©l√©brit√©", "pas cr√©dible", "attention", "prudent"
        ]
        
        self.naive_keywords = [
            "vrai", "g√©nial", "incroyable", "r√™ve", "chance", "honneur",
            "heureux", "heureuse", "excit√©", "excit√©e", "amour", "mariage",
            "oui", "d'accord", "accepte", "pourquoi pas", "bien s√ªr"
        ]
        
        self.boundary_keywords = [
            "non", "jamais", "refuse", "pas question", "priv√©", "personnel",
            "ne partage pas", "ne donne pas", "trop rapide", "trop t√¥t",
            "pas d'argent", "pas de virement", "rencontrer d'abord"
        ]
        
        self.money_warning_keywords = [
            "argent", "pr√™t", "virement", "compte", "euros", "‚Ç¨", "rib",
            "banque", "payer", "rembourser", "aide financi√®re", "urgent"
        ]

    def analyze_sentiment(self, text):
        """Analyse le sentiment et les indices de suspicion dans le texte"""
        text_lower = text.lower()
        
        suspicious_score = sum(1 for keyword in self.suspicious_keywords 
                             if keyword in text_lower)
        naive_score = sum(1 for keyword in self.naive_keywords 
                         if keyword in text_lower)
        boundary_score = sum(1 for keyword in self.boundary_keywords 
                            if keyword in text_lower)
        money_awareness = sum(1 for keyword in self.money_warning_keywords 
                             if keyword in text_lower)
        
        # D√©tection de questions (bon r√©flexe)
        question_indicators = ["?", "comment", "pourquoi", "qui", "quoi", "quand", "o√π"]
        question_score = sum(1 for indicator in question_indicators 
                           if indicator in text_lower)
        
        return {
            "suspicious_score": suspicious_score,
            "naive_score": naive_score,
            "boundary_score": boundary_score,
            "money_awareness": money_awareness,
            "question_score": question_score,
            "text_length": len(text.split())
        }

def evaluate_response(user_response, current_scenario, step):
    """
    √âvalue la r√©ponse de l'utilisateur et retourne un score et une cat√©gorie
    
    Args:
        user_response (str): La r√©ponse de l'utilisateur
        current_scenario (dict): Le sc√©nario actuel de Brad
        step (int): L'√©tape actuelle du jeu
    
    Returns:
        dict: √âvaluation avec score, cat√©gorie et explications
    """
    analyzer = ResponseAnalyzer()
    sentiment_analysis = analyzer.analyze_sentiment(user_response)
    
    # Calcul du score de base selon l'√©tape
    base_scores = {
        0: {"suspicious": 5, "boundary": 3, "naive": -1, "neutral": 1},
        1: {"suspicious": 4, "boundary": 5, "naive": -2, "neutral": 0},
        2: {"suspicious": 4, "boundary": 4, "naive": -3, "neutral": -1},
        3: {"suspicious": 5, "boundary": 6, "naive": -4, "neutral": -2},
        4: {"suspicious": 6, "boundary": 7, "naive": -5, "neutral": -3}
    }
    
    current_step_scores = base_scores.get(step, base_scores[4])
    
    # D√©termination de la cat√©gorie de r√©ponse
    if sentiment_analysis["suspicious_score"] >= 2:
        category = "suspicious"
        score_change = current_step_scores["suspicious"]
        security_level = "excellent"
    elif sentiment_analysis["boundary_score"] >= 2:
        category = "boundary"
        score_change = current_step_scores["boundary"]
        security_level = "good"
    elif sentiment_analysis["naive_score"] >= 2:
        category = "naive"
        score_change = current_step_scores["naive"]
        security_level = "poor"
    else:
        category = "neutral"
        score_change = current_step_scores["neutral"]
        security_level = "average"
    
    # Bonus pour les questions (signe de r√©flexion)
    if sentiment_analysis["question_score"] >= 1:
        score_change += 1
    
    # Bonus pour reconnaissance des signaux d'alarme financiers
    if step >= 3 and sentiment_analysis["money_awareness"] >= 1:
        score_change += 2
    
    # Malus pour r√©ponses trop courtes (moins de r√©flexion)
    if sentiment_analysis["text_length"] < 3:
        score_change -= 1
    
    return {
        "category": category,
        "score_change": score_change,
        "security_level": security_level,
        "sentiment_analysis": sentiment_analysis,
        "detected_red_flags": current_scenario.get("red_flags", []),
        "user_response_length": len(user_response)
    }

def get_feedback_message(evaluation, step):
    """
    G√©n√®re un message de feedback personnalis√© selon l'√©valuation
    
    Args:
        evaluation (dict): R√©sultat de l'√©valuation
        step (int): √âtape actuelle
    
    Returns:
        str: Message de feedback format√©
    """
    category = evaluation["category"]
    security_level = evaluation["security_level"]
    score_change = evaluation["score_change"]
    
    # Messages de base selon la cat√©gorie
    feedback_templates = {
        "suspicious": [
            "üõ°Ô∏è **Excellent r√©flexe !** Vous avez identifi√© les signaux d'alarme.",
            "üîç **Bravo !** Votre m√©fiance est justifi√©e dans cette situation.",
            "‚ö° **Parfait !** Vous savez reconna√Ætre une tentative de manipulation.",
            "üéØ **Top !** Cette vigilance vous prot√©gera des vraies arnaques."
        ],
        "boundary": [
            "üëç **Bien jou√© !** Vous posez des limites claires.",
            "üöß **Sage d√©cision !** Refuser de partager des infos personnelles est essentiel.",
            "üí™ **Bonne attitude !** Vous savez dire non aux demandes inappropri√©es.",
            "üéØ **Correct !** Cette prudence est exactement ce qu'il faut."
        ],
        "naive": [
            "‚ö†Ô∏è **Attention !** Cette r√©ponse pourrait vous mettre en danger.",
            "üö® **Vigilance !** Les escrocs exploitent ce type de r√©action.",
            "üí° **R√©fl√©chissez !** Une vraie c√©l√©brit√© ne vous contacterait pas ainsi.",
            "üõ°Ô∏è **Prudence !** Cette confiance pourrait √™tre exploit√©e."
        ],
        "neutral": [
            "ü§î **R√©ponse neutre.** Essayez d'√™tre plus vigilant aux signaux d'alarme.",
            "üí≠ **Mitig√©.** D√©veloppez votre sens critique face aux contacts suspects.",
            "‚öñÔ∏è **√âquilibr√©.** Mais m√©fiez-vous plus des approches non sollicit√©es.",
            "üìö **√Ä am√©liorer.** Apprenez √† reconna√Ætre les techniques de manipulation."
        ]
    }
    
    base_message = random.choice(feedback_templates[category])
    
    # Messages sp√©cifiques selon l'√©tape
    step_specific_advice = {
        0: "Un vrai Brad Pitt n'aborderait jamais des inconnus sur les r√©seaux sociaux.",
        1: "Jamais de num√©ro de t√©l√©phone √† un inconnu, m√™me s'il pr√©tend √™tre c√©l√®bre !",
        2: "Une d√©claration d'amour apr√®s quelques messages ? üö© Signal d'alarme majeur !",
        3: "üí∞ **ALERTE ROUGE** : Premi√®re demande d'argent ! C'est le c≈ìur de l'arnaque.",
        4: "üö® **DANGER MAXIMUM** : RIB partag√© + chantage √©motionnel = arnaque confirm√©e !"
    }
    
    # Construction du message final
    feedback_parts = [base_message]
    
    # Ajout des conseils sp√©cifiques √† l'√©tape
    if step in step_specific_advice:
        feedback_parts.append(f"\nüìç **Point cl√© :** {step_specific_advice[step]}")
    
    # Ajout du score
    if score_change > 0:
        feedback_parts.append(f"\n‚úÖ **+{score_change} points s√©curit√© !**")
    elif score_change < 0:
        feedback_parts.append(f"\n‚ùå **{score_change} points s√©curit√©**")
    
    # Conseils de cybers√©curit√© selon l'√©tape
    cyber_tips = {
        0: "üîç **Conseil :** V√©rifiez toujours l'identit√© des contacts non sollicit√©s.",
        1: "üîí **Conseil :** Ne partagez jamais vos coordonn√©es avec des inconnus.",
        2: "üíî **Conseil :** L'amour en ligne prend du temps, pas quelques messages.",
        3: "üí∏ **Conseil :** JAMAIS d'argent √† quelqu'un que vous n'avez pas rencontr√© !",
        4: "üö® **Conseil :** Signalez ce type de tentative d'arnaque aux autorit√©s."
    }
    
    if step in cyber_tips:
        feedback_parts.append(f"\n{cyber_tips[step]}")
    
    return "\n".join(feedback_parts)

def get_final_security_assessment(total_score):
    """
    Fournit une √©valuation finale du niveau de s√©curit√© de l'utilisateur
    
    Args:
        total_score (int): Score total obtenu
    
    Returns:
        dict: √âvaluation compl√®te avec recommandations
    """
    if total_score >= 20:
        level = "Expert en cybers√©curit√©"
        message = "üèÜ Vous √™tes parfaitement pr√©par√© contre les arnaques sentimentales !"
        recommendations = [
            "Continuez √† partager vos connaissances avec vos proches",
            "Restez inform√© des nouvelles techniques d'arnaque",
            "Signalez les tentatives d'arnaque aux autorit√©s"
        ]
    elif total_score >= 15:
        level = "Tr√®s vigilant"
        message = "üõ°Ô∏è Excellent niveau de protection ! Quelques points √† peaufiner."
        recommendations = [
            "Renforcez votre m√©fiance d√®s les premiers contacts suspects",
            "Partagez vos connaissances avec vos proches",
            "Restez √† jour sur les nouvelles techniques d'arnaque"
        ]
    elif total_score >= 8:
        level = "Vigilance correcte"
        message = "‚ö° Bon niveau de base, mais attention aux zones de faiblesse."
        recommendations = [
            "D√©veloppez votre r√©flexe de m√©fiance",
            "Apprenez les signaux d'alarme classiques",
            "N'h√©sitez jamais √† demander conseil √† vos proches"
        ]
    elif total_score >= 3:
        level = "Vigilance insuffisante"
        message = "‚ö†Ô∏è Vous pourriez √™tre vuln√©rable. Formation recommand√©e !"
        recommendations = [
            "√âtudiez les techniques d'arnaque sentimentale",
            "M√©fiez-vous syst√©matiquement des contacts non sollicit√©s",
            "Consultez des ressources √©ducatives en cybers√©curit√©"
        ]
    else:
        level = "Forte vuln√©rabilit√©"
        message = "üö® ATTENTION ! Risque √©lev√© de tomber dans une arnaque."
        recommendations = [
            "Formation urgente en cybers√©curit√© recommand√©e",
            "Parlez de vos interactions en ligne √† des proches",
            "Consultez les ressources officielles (cybermalveillance.gouv.fr)"
        ]
    
    return {
        "level": level,
        "message": message,
        "recommendations": recommendations,
        "score": total_score
    } 